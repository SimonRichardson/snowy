// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/snowy/pkg/repository (interfaces: Repository)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/trussle/snowy/pkg/models"
	repository "github.com/trussle/snowy/pkg/repository"
	uuid "github.com/trussle/snowy/pkg/uuid"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return _m.recorder
}

// AppendLedger mocks base method
func (_m *MockRepository) AppendLedger(_param0 uuid.UUID, _param1 models.Ledger) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "AppendLedger", _param0, _param1)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendLedger indicates an expected call of AppendLedger
func (_mr *MockRepositoryMockRecorder) AppendLedger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AppendLedger", arg0, arg1)
}

// Close mocks base method
func (_m *MockRepository) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// ForkLedger mocks base method
func (_m *MockRepository) ForkLedger(_param0 uuid.UUID, _param1 models.Ledger) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "ForkLedger", _param0, _param1)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkLedger indicates an expected call of ForkLedger
func (_mr *MockRepositoryMockRecorder) ForkLedger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ForkLedger", arg0, arg1)
}

// InsertLedger mocks base method
func (_m *MockRepository) InsertLedger(_param0 models.Ledger) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "InsertLedger", _param0)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLedger indicates an expected call of InsertLedger
func (_mr *MockRepositoryMockRecorder) InsertLedger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertLedger", arg0)
}

// PutContent mocks base method
func (_m *MockRepository) PutContent(_param0 models.Content) (models.Content, error) {
	ret := _m.ctrl.Call(_m, "PutContent", _param0)
	ret0, _ := ret[0].(models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContent indicates an expected call of PutContent
func (_mr *MockRepositoryMockRecorder) PutContent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutContent", arg0)
}

// SelectContent mocks base method
func (_m *MockRepository) SelectContent(_param0 uuid.UUID, _param1 repository.Query) (models.Content, error) {
	ret := _m.ctrl.Call(_m, "SelectContent", _param0, _param1)
	ret0, _ := ret[0].(models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContent indicates an expected call of SelectContent
func (_mr *MockRepositoryMockRecorder) SelectContent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectContent", arg0, arg1)
}

// SelectContents mocks base method
func (_m *MockRepository) SelectContents(_param0 uuid.UUID, _param1 repository.Query) ([]models.Content, error) {
	ret := _m.ctrl.Call(_m, "SelectContents", _param0, _param1)
	ret0, _ := ret[0].([]models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContents indicates an expected call of SelectContents
func (_mr *MockRepositoryMockRecorder) SelectContents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectContents", arg0, arg1)
}

// SelectForkLedgers mocks base method
func (_m *MockRepository) SelectForkLedgers(_param0 uuid.UUID) ([]models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "SelectForkLedgers", _param0)
	ret0, _ := ret[0].([]models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectForkLedgers indicates an expected call of SelectForkLedgers
func (_mr *MockRepositoryMockRecorder) SelectForkLedgers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectForkLedgers", arg0)
}

// SelectLedger mocks base method
func (_m *MockRepository) SelectLedger(_param0 uuid.UUID, _param1 repository.Query) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "SelectLedger", _param0, _param1)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLedger indicates an expected call of SelectLedger
func (_mr *MockRepositoryMockRecorder) SelectLedger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectLedger", arg0, arg1)
}

// SelectLedgers mocks base method
func (_m *MockRepository) SelectLedgers(_param0 uuid.UUID, _param1 repository.Query) ([]models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "SelectLedgers", _param0, _param1)
	ret0, _ := ret[0].([]models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLedgers indicates an expected call of SelectLedgers
func (_mr *MockRepositoryMockRecorder) SelectLedgers(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectLedgers", arg0, arg1)
}
