// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/snowy/pkg/repository (interfaces: Repository)

package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trussle/snowy/pkg/models"
	repository "github.com/trussle/snowy/pkg/repository"
	uuid "github.com/trussle/snowy/pkg/uuid"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return _m.recorder
}

// AppendLedger mocks base method
func (_m *MockRepository) AppendLedger(_param0 uuid.UUID, _param1 models.Ledger) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "AppendLedger", _param0, _param1)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendLedger indicates an expected call of AppendLedger
func (_mr *MockRepositoryMockRecorder) AppendLedger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AppendLedger", reflect.TypeOf((*MockRepository)(nil).AppendLedger), arg0, arg1)
}

// Close mocks base method
func (_m *MockRepository) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// GetContent mocks base method
func (_m *MockRepository) GetContent(_param0 uuid.UUID, _param1 repository.Query) (models.Content, error) {
	ret := _m.ctrl.Call(_m, "GetContent", _param0, _param1)
	ret0, _ := ret[0].(models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent
func (_mr *MockRepositoryMockRecorder) GetContent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetContent", reflect.TypeOf((*MockRepository)(nil).GetContent), arg0, arg1)
}

// GetContents mocks base method
func (_m *MockRepository) GetContents(_param0 uuid.UUID, _param1 repository.Query) ([]models.Content, error) {
	ret := _m.ctrl.Call(_m, "GetContents", _param0, _param1)
	ret0, _ := ret[0].([]models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContents indicates an expected call of GetContents
func (_mr *MockRepositoryMockRecorder) GetContents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetContents", reflect.TypeOf((*MockRepository)(nil).GetContents), arg0, arg1)
}

// GetLedger mocks base method
func (_m *MockRepository) GetLedger(_param0 uuid.UUID, _param1 repository.Query) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "GetLedger", _param0, _param1)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedger indicates an expected call of GetLedger
func (_mr *MockRepositoryMockRecorder) GetLedger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLedger", reflect.TypeOf((*MockRepository)(nil).GetLedger), arg0, arg1)
}

// GetLedgers mocks base method
func (_m *MockRepository) GetLedgers(_param0 uuid.UUID, _param1 repository.Query) ([]models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "GetLedgers", _param0, _param1)
	ret0, _ := ret[0].([]models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgers indicates an expected call of GetLedgers
func (_mr *MockRepositoryMockRecorder) GetLedgers(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLedgers", reflect.TypeOf((*MockRepository)(nil).GetLedgers), arg0, arg1)
}

// InsertLedger mocks base method
func (_m *MockRepository) InsertLedger(_param0 models.Ledger) (models.Ledger, error) {
	ret := _m.ctrl.Call(_m, "InsertLedger", _param0)
	ret0, _ := ret[0].(models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLedger indicates an expected call of InsertLedger
func (_mr *MockRepositoryMockRecorder) InsertLedger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InsertLedger", reflect.TypeOf((*MockRepository)(nil).InsertLedger), arg0)
}

// PutContent mocks base method
func (_m *MockRepository) PutContent(_param0 models.Content) (models.Content, error) {
	ret := _m.ctrl.Call(_m, "PutContent", _param0)
	ret0, _ := ret[0].(models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContent indicates an expected call of PutContent
func (_mr *MockRepositoryMockRecorder) PutContent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutContent", reflect.TypeOf((*MockRepository)(nil).PutContent), arg0)
}
