// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

package repository

import (
	document "github.com/trussle/snowy/pkg/document"
	uuid "github.com/trussle/snowy/pkg/uuid"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return _m.recorder
}

// GetDocument mocks base method
func (_m *MockRepository) GetDocument(resourceID uuid.UUID) (document.Document, error) {
	ret := _m.ctrl.Call(_m, "GetDocument", resourceID)
	ret0, _ := ret[0].(document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument
func (_mr *MockRepositoryMockRecorder) GetDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDocument", reflect.TypeOf((*MockRepository)(nil).GetDocument), arg0)
}

// PutDocument mocks base method
func (_m *MockRepository) PutDocument(doc document.Document) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "PutDocument", doc)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDocument indicates an expected call of PutDocument
func (_mr *MockRepositoryMockRecorder) PutDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutDocument", reflect.TypeOf((*MockRepository)(nil).PutDocument), arg0)
}

// GetContent mocks base method
func (_m *MockRepository) GetContent(resourceID uuid.UUID) (document.Content, error) {
	ret := _m.ctrl.Call(_m, "GetContent", resourceID)
	ret0, _ := ret[0].(document.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent
func (_mr *MockRepositoryMockRecorder) GetContent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetContent", reflect.TypeOf((*MockRepository)(nil).GetContent), arg0)
}

// PutContent mocks base method
func (_m *MockRepository) PutContent(content document.Content) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "PutContent", content)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContent indicates an expected call of PutContent
func (_mr *MockRepositoryMockRecorder) PutContent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutContent", reflect.TypeOf((*MockRepository)(nil).PutContent), arg0)
}

// Close mocks base method
func (_m *MockRepository) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// MocknotFound is a mock of notFound interface
type MocknotFound struct {
	ctrl     *gomock.Controller
	recorder *MocknotFoundMockRecorder
}

// MocknotFoundMockRecorder is the mock recorder for MocknotFound
type MocknotFoundMockRecorder struct {
	mock *MocknotFound
}

// NewMocknotFound creates a new mock instance
func NewMocknotFound(ctrl *gomock.Controller) *MocknotFound {
	mock := &MocknotFound{ctrl: ctrl}
	mock.recorder = &MocknotFoundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MocknotFound) EXPECT() *MocknotFoundMockRecorder {
	return _m.recorder
}

// NotFound mocks base method
func (_m *MocknotFound) NotFound() bool {
	ret := _m.ctrl.Call(_m, "NotFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (_mr *MocknotFoundMockRecorder) NotFound() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NotFound", reflect.TypeOf((*MocknotFound)(nil).NotFound))
}
