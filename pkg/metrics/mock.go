// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/prometheus/client_golang/prometheus"
)

// MockGauge is a mock of Gauge interface
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
}

// MockGaugeMockRecorder is the mock recorder for MockGauge
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return _m.recorder
}

// Inc mocks base method
func (_m *MockGauge) Inc() {
	_m.ctrl.Call(_m, "Inc")
}

// Inc indicates an expected call of Inc
func (_mr *MockGaugeMockRecorder) Inc() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Inc", reflect.TypeOf((*MockGauge)(nil).Inc))
}

// Dec mocks base method
func (_m *MockGauge) Dec() {
	_m.ctrl.Call(_m, "Dec")
}

// Dec indicates an expected call of Dec
func (_mr *MockGaugeMockRecorder) Dec() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Dec", reflect.TypeOf((*MockGauge)(nil).Dec))
}

// MockHistogramVec is a mock of HistogramVec interface
type MockHistogramVec struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramVecMockRecorder
}

// MockHistogramVecMockRecorder is the mock recorder for MockHistogramVec
type MockHistogramVecMockRecorder struct {
	mock *MockHistogramVec
}

// NewMockHistogramVec creates a new mock instance
func NewMockHistogramVec(ctrl *gomock.Controller) *MockHistogramVec {
	mock := &MockHistogramVec{ctrl: ctrl}
	mock.recorder = &MockHistogramVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHistogramVec) EXPECT() *MockHistogramVecMockRecorder {
	return _m.recorder
}

// WithLabelValues mocks base method
func (_m *MockHistogramVec) WithLabelValues(_param0 ...string) prometheus.Observer {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "WithLabelValues", _s...)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues
func (_mr *MockHistogramVecMockRecorder) WithLabelValues(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithLabelValues", reflect.TypeOf((*MockHistogramVec)(nil).WithLabelValues), arg0...)
}

// MockObserver is a mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return _m.recorder
}

// Observe mocks base method
func (_m *MockObserver) Observe(_param0 float64) {
	_m.ctrl.Call(_m, "Observe", _param0)
}

// Observe indicates an expected call of Observe
func (_mr *MockObserverMockRecorder) Observe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Observe", reflect.TypeOf((*MockObserver)(nil).Observe), arg0)
}
