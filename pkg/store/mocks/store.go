// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/snowy/pkg/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/trussle/snowy/pkg/store"
	uuid "github.com/trussle/uuid"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Drop mocks base method
func (m *MockStore) Drop() error {
	ret := m.ctrl.Call(m, "Drop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop
func (mr *MockStoreMockRecorder) Drop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockStore)(nil).Drop))
}

// Insert mocks base method
func (m *MockStore) Insert(arg0 store.Entity) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockStoreMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStore)(nil).Insert), arg0)
}

// Run mocks base method
func (m *MockStore) Run() error {
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockStoreMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStore)(nil).Run))
}

// Select mocks base method
func (m *MockStore) Select(arg0 uuid.UUID, arg1 store.Query) (store.Entity, error) {
	ret := m.ctrl.Call(m, "Select", arg0, arg1)
	ret0, _ := ret[0].(store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockStoreMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockStore)(nil).Select), arg0, arg1)
}

// SelectForkRevisions mocks base method
func (m *MockStore) SelectForkRevisions(arg0 uuid.UUID) ([]store.Entity, error) {
	ret := m.ctrl.Call(m, "SelectForkRevisions", arg0)
	ret0, _ := ret[0].([]store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectForkRevisions indicates an expected call of SelectForkRevisions
func (mr *MockStoreMockRecorder) SelectForkRevisions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectForkRevisions", reflect.TypeOf((*MockStore)(nil).SelectForkRevisions), arg0)
}

// SelectRevisions mocks base method
func (m *MockStore) SelectRevisions(arg0 uuid.UUID, arg1 store.Query) ([]store.Entity, error) {
	ret := m.ctrl.Call(m, "SelectRevisions", arg0, arg1)
	ret0, _ := ret[0].([]store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRevisions indicates an expected call of SelectRevisions
func (mr *MockStoreMockRecorder) SelectRevisions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRevisions", reflect.TypeOf((*MockStore)(nil).SelectRevisions), arg0, arg1)
}

// Stop mocks base method
func (m *MockStore) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockStoreMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStore)(nil).Stop))
}
