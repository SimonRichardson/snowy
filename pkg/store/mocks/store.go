// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/snowy/pkg/store (interfaces: Store)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/trussle/snowy/pkg/store"
	uuid "github.com/trussle/snowy/pkg/uuid"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStore) EXPECT() *MockStoreMockRecorder {
	return _m.recorder
}

// Drop mocks base method
func (_m *MockStore) Drop() error {
	ret := _m.ctrl.Call(_m, "Drop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop
func (_mr *MockStoreMockRecorder) Drop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Drop")
}

// Insert mocks base method
func (_m *MockStore) Insert(_param0 store.Entity) error {
	ret := _m.ctrl.Call(_m, "Insert", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (_mr *MockStoreMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0)
}

// Run mocks base method
func (_m *MockStore) Run() error {
	ret := _m.ctrl.Call(_m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (_mr *MockStoreMockRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run")
}

// Select mocks base method
func (_m *MockStore) Select(_param0 uuid.UUID, _param1 store.Query) (store.Entity, error) {
	ret := _m.ctrl.Call(_m, "Select", _param0, _param1)
	ret0, _ := ret[0].(store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (_mr *MockStoreMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Select", arg0, arg1)
}

// SelectRevisions mocks base method
func (_m *MockStore) SelectRevisions(_param0 uuid.UUID, _param1 store.Query) ([]store.Entity, error) {
	ret := _m.ctrl.Call(_m, "SelectRevisions", _param0, _param1)
	ret0, _ := ret[0].([]store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRevisions indicates an expected call of SelectRevisions
func (_mr *MockStoreMockRecorder) SelectRevisions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectRevisions", arg0, arg1)
}

// Stop mocks base method
func (_m *MockStore) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockStoreMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
